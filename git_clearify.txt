// TODO 

** what does it mean by --bare repository does not have a working directory???

==========================================================================================================
tag vs. branch

** tags   : symbolic names for a given revision. (making sense out of commit identifiers --usually some odd reference codes)
   -->  tagging is on commits!!
   -->  tags are basically like branch references that never move. Once a tag is created, unless a '--force' is used, it will never change.
        --> makes them useful for marking specific versions

** branch : symbolic names for line of development.

==========================================================================================================
// TODO

** track remote repository of different local pushes(check-in) ??
** different local pushes on a remote ??

==========================================================================================================
// TODO

** how is branch and working copy(physical directories) different?
** when "$git checkout <branch>", the the actuall directory still have files from the other branch?

==========================================================================================================
// TODO WHAT CAUSES THIS??!

** ERROR MESSAGE: "Updates were rejected because the tip of your current branch is behind" when trying to push

** Another situation where you might run into this, is if youâ€™re tracking a branch that is not the same name as the remote. For instance, say you have a remote branch called otherrepo/master and you already have a local master branch, so you checkout the otherrepo/master branch as othermaster locally. Now even though you do a pull, when you go to push, you will get the rejected error.

To get around this, you will have to specify the local branch in the push command using a colon (:) like so:

$git push otherrepo othermaster:master

==========================================================================================================

$git fetch vs. $git pull

** where does the result of fetch go if files were not merged??!

** fetches contents are represented as a remote branch, it haas absolutely no effect on local development work 

==========================================================================================================

// TODO
$git init
$git remote add <remote-shortname> <url>
$git commit


** comparison:
* clone cannot change remote_shortname?

==========================================================================================================

**
Difference between git and SVN

SVN: central repository to working copy interaction
ex.
  checking working copy into SVN's central repository

git: repository to repository interaction (no distinction between working copy and central repository)
ex.
  push or pull commits from one repository to another, can give any repository special meaning (such as central or origin accomplished through convention rather then hardwired like the SVN)


==========================================================================================================

Staging:

**"git add" STAGES what will go into the next commit, ex. if a group of change  were part of change_A, another group of changes were part of change_B, they can be added seperatedly, result them to be in different commit

** instead of commiting all the changes made since last commit, stage allow user to group related changes into highly focused snapshots before actually committing to the project history.

** git doesn't differentiate between staging changes in new files vs. changes in files that have already been added to the repository


==========================================================================================================

Commit:

** git commit is different from SVN commit. Staged snapshots are committed to the local repository as a "safe" version, and it requires no interaction with other git repositories (plainly local). Whereas the SVN commit merges the local working directory with the central.

** git commits are always a snapshot commited to the local repository, SVN is a working copy commited to a central repository. In a way, git isn't forced to interact with the central repository until the user is ready, each developer's local repository is a buffer between their contributions and the central repository.

** SVN tracks difference of files between working copy and contral. Git
version control model is based on snapshots. Git records the entire contents
of each file in every commit. Making Git operation faster than SVN, since SVN
uses a compare.

==========================================================================================================

Checkout:

** read only operation. The "current state" remain untouched in the master branch, while the HEAD (instead of pointing to master or some working branch), points directly to a previous commit. Called a "detached HEAD".

** To resume developing, one need to first get back to the "current state" of the project (whether it the master or other branches).

ex. 
  $git log --oneline
b7119f2 Continue doing crazy things
872fa7e Try something crazy
a1e8fb5 Make some important changes to hello.py
435b61d Create hello.py
9773e52 Initial import

  $git checkout a1e8fb5
# Nothing done here will be saved in the repository

  $git checkout master
# Go back to the current state, can use "$git revert" or "git reset" to undo undesired changes.

** the whole idea of version control system (VCS) is to store "safe" copies of a project. Once the history is built, "$git checkout" is to used to "load" any of the snapshots onto the development machine.


==========================================================================================================


Reverting vs. Resetting

** Revert advantages over Resetting: 
  1. revert doesn't change project history, making it "safer" for commits that have already been published to a shared repository.
  2. revert can target an individual commit at an arbitary point in the commit history; whereas, "$git reset" can only work backward from the current commit.

** if an older commit in the history is desired, one would have to remove all of the commits that occured after the target commit, remove it, then re-commit all of the subsequent commits.

** if "$git revert" is a "safe" way to undo changes, one can think "$git
reset" as the dangerous method. When undo with reset, there is no way to
retrieve the original copy--it's a permanant undo. 

** The ONLY GIT COMMANDS THAT HAS POTENTIAL TO LOSE WORKS. Extra care must be taken. RECOMMENDED TO USE ON LOCAL CHANGES ONLY, should not reset snapshots that have been shared with other developers.

** "$git reset" is a way to clean up a repository by unstaging changes or uncommitting a series of snapshots, the "--hard" flag comes in handy when the working directory has gone horribly wrong and one need a clean slate to work with.

** Whereas "reverting" is designed to safely undo a public commit, "reseting"
is designed to undo local changes. Because of the distinct goals, two commands
were implemented differently:
  resetting: complitely removes a changeset. After publishing a commit, one have to assume that other developers are reliant upon it, and shouldn't reset on it.
  reverting: maintains the original changeset and uses a new commit to apply the undo.


==========================================================================================================


Branches(pointer to commits): (part of everyday development process)

** represents an independent line of development.

** a general purpose branch that creates isolated development environments within a single repository

** GIT branch is different from SVN such that: 
  SVN branches: are only used to capture the occasional large-scale development effort
  GIT branches: are an integral part of everyday workflow

** branch represents an independent line of development. 

** "$git branch" doesn't allow to switch between branches or put a forked history back together again. Thus often uses integratedly with "$git checkout" and "$git merge"

** in GIT, when adding a new feature or fixing a bug, not matter big or small, spawn a new branch to encapsulate changes. This makes sure that unstable code is never committed to the main code base, it also gives the chance to clean up history before merging to the main branch.

** SVN branch: copying files from directory to directory
   GIT branch: branch represents the tip of a series of commits, not a container of commits. History for a branch is extrapolated through the commit relationships.

** the way GIT branches, has a dramatic impact on GIT's merging.
  SVN merging: file basis.
  GIT merging: abstract level of commits. Can actually see merges in the project history as a joining of two independent commit histories.


==========================================================================================================


